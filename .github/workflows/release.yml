name: Release

# trigger after master merge, except release branch
on:
  pull_request:
    types:
      - closed
    branches:
      - master

jobs:
  release:
    name: create release
    if: github.event.pull_request.merged == true && ${{ !startsWith(GITHUB_REF_NAME , 'release v') }}
    runs-on: ubuntu-latest

    steps:
      - name: debug
        run: echo release

      # - name: Clone repository
      #   uses: actions/checkout@v3

      # - name: Setup Node
      #   uses: actions/setup-node@v3
      #   with:
      #     node-version: '18'
      #     cache: 'npm'

      # - name: get release version
      #   id: release_version
      #   run: |
      #     TAGGED_VERSION="${GITHUB_REF/refs\/tags\/v/}"
      #     if [[ ! "${TAGGED_VERSION}" =~ ^[0-9]+\.[0-9]+\.[0-9]+.*$ ]]; then
      #       echo "Invalid version tag '${TAGGED_VERSION}'"
      #       exit 1
      #     fi
      #     echo "EXT_VERSION=${TAGGED_VERSION}" >> $GITHUB_ENV
      #     WRITTEN_VERSION="$(cat package.json | jq '.version' -r)"
      #     if [[ "${TAGGED_VERSION}" == *"-"* ]]; then
      #       if [[ ! "${TAGGED_VERSION}" == "${WRITTEN_VERSION}"-rc.* ]]; then
      #         echo "Prerelease Tag and Version in package.json are not compatible: '${TAGGED_VERSION}' vs '${WRITTEN_VERSION}'"
      #         exit 1
      #       fi
      #       echo "EXT_ISPREVIEW=1" >> $GITHUB_ENV
      #     else
      #       if [[ "${TAGGED_VERSION}" != "${WRITTEN_VERSION}" ]]; then
      #         echo "Release Tag and Version in package.json do not match: '${TAGGED_VERSION}' vs '${WRITTEN_VERSION}'"
      #         exit 1
      #       fi
      #       echo "EXT_ISPREVIEW=0" >> $GITHUB_ENV
      #     fi
      # - name: stamp version
      #   run: |
      #     cat package.json | jq --arg VER "${{ env.EXT_VERSION }}" '.version=$VER' > /tmp/package.json 
      #     cp /tmp/package.json ./package.json
      #     npm ci
      #     npm run vscode:prepublish
      # - name: package extension
      #   run: npx vsce package -o "./go-${{ env.EXT_VERSION }}.vsix"

      # - name: create release
      #   id: create_release
      #   uses: actions/create-release@v1
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   with:
      #     tag_name: ${{ github.ref }}
      #     release_name: Release ${{ env.EXT_VERSION }}
      #     draft: false
      #     prerelease: ${{env.EXT_ISPREVIEW == 1}}

      # - name: upload release asset
      #   uses: actions/upload-release-asset@v1
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   with:
      #     upload_url: ${{ steps.create_release.outputs.upload_url }}
      #     asset_path: ./go-${{ env.EXT_VERSION }}.vsix
      #     asset_name: go-${{ env.EXT_VERSION }}.vsix
      #     asset_content_type: application/zip

      # - name: publish
      #   if: env.EXT_ISPREVIEW != 1 && github.repository == 'golang/vscode-go'
      #   run: npx vsce publish -i "./go-${{ env.EXT_VERSION }}.vsix" -p "${{ secrets.VSCE_TOKEN }}"
